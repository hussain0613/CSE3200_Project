@model CSE3200_Project.Models.Shelf
@using CSE3200_Project.Models

@{
    ViewBag.Title = "Edit";
    User current_user = (User)HttpContext.Current.Items["current_user"];
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Shelf</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.id)


    <div class="form-group">
        @Html.LabelFor(model => model.title, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.title, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.details, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.details, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.details, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.privacy, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                List<SelectListItem> listItem = new List<SelectListItem> {
                        new SelectListItem(){
                            Text = "Private",
                            Value = "private",
                            Selected = true
                        },
                        new SelectListItem(){
                            Text = "Public",
                            Value = "public"
                        }
                    };
            }
            @Html.DropDownList("privacy", listItem, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.privacy, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("contents", "Add Contents", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <select name="contents" id="contents" multiple class="form-control dropdown">
                <optgroup label="In the shelf">
                    @foreach (Content content in Model.Contents)
                    {
                        <option value="@content.id" selected>@content.title</option>
                    }
                </optgroup>
                <optgroup label="Unassociated">
                    @foreach (Content content in ViewBag.unassociated_contents)
                    {
                        if (!Model.Contents.Contains(content))
                        {
                            <option value="@content.id">@content.title</option>
                        }
                    }
                </optgroup>
            </select>
        </div>
    </div>

    <div class="form-group">
        @Html.Label("tags", "Put into tags", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                string str = "";
                str += Model.tags.ElementAt(0).tag1;
            }

            @for (int i = 1; i < Model.tags.Count(); i++)
            {
                str += ",";
                str += Model.tags.ElementAt(i).tag1;
            }

            @Html.TextArea("Tags", str, new { htmlAttributes = new { @class = "form-control", @Value = str } })


        </div>
    </div>


    @if (current_user != null && current_user.role.ToLower().Equals("admin"))
    {
        <div class="form-group">
            @Html.LabelFor(model => model.status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.status)
                    @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    }

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
